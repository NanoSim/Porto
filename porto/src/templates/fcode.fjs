@{
    var fapi = require('soft.forge.fapi');

    String.prototype.capitalize = function() {
      return this.charAt(0).toUpperCase() + this.slice(1);
    }
    
    entity = soft.model.name.toLowerCase();
    ENTITY = soft.model.name.toUpperCase();
    Entity = entity.capitalize();

    attributes = (function(){
	var attr = [];
	soft.model.properties.forEach(function (entry){
	    var o = {};
	    o.name = entry.name;
	    o.type = fapi.type_to_f(entry.type);
	    o.rank = (entry.dims != undefined ? entry.dims.length : 0);
	    o.dims = entry.dims;
	    o.description = (entry.description == undefined ? '' : " !" + entry.description);
	    attr.push(o);
	});
	return attr;
    })();

    dimsDeclList = (function(){
	var ds = [];
	if (soft.model.dimensions != undefined) {
	    soft.model.dimensions.forEach(function(entry){
		ds.push("integer(c_size_t)  :: " + entry.name + (entry.description == undefined ? '' : " !" + entry.description));
	    });
	}
	return ds;
    })();

    propsDeclList = (function(){
	var xs = [];
	attributes.forEach(function (entry){
	    if (entry.rank == 0) {
		xs.push(entry.type + " :: " + entry.name + " " + entry.description);
	    } else {
		xs.push("type(c_ptr) :: " + entry.name + " " + entry.description);
	    }
	});
	return xs;
    })();

    allocDeclList = (function(){
	var xs = [];
	attributes.forEach(function (entry){
	    if (entry.rank > 0) {
		xs.push("type(c_ptr) :: " + entry.name);
	    }
	});
	return xs;
    })();

    selfDeclList = (function(){
	var xs = [];
	attributes.forEach(function (entry){
	    var decoration = '';
	    if (entry.rank > 0) {
		decoration = ", dimension("+fapi.dims_to_ptr(entry.rank)+"), pointer";
	    }
	    xs.push(entry.type + decoration + " :: " + entry.name + " " + entry.description);
	});
	return xs;
    })();

    declLocalDimensions = (function(){
	var xs = [];
	if (soft.model.dimensions != undefined) {
	    soft.model.dimensions.forEach(function(entry){
		xs.push("integer(c_size_t) :: "+ entry.name);
	    });
	}
	return xs;
    })();

    constructorSetDimensions = (function(){
	var xs = [];
	if (soft.model.dimensions != undefined) {
	    soft.model.dimensions.forEach(function(entry){
		xs.push(entry.name + " = self%dims%" + entry.name);
		xs.push("constructor%dimensions%" + entry.name + " = " + entry.name);
	    });
	}
	return xs;
    })();

    constructorSetProperties = (function(){
	var xs = [];
	attributes.forEach(function (entry){
	    if (entry.rank == 0) {
		xs.push("constructor%" + entry.name + " = self%props%" + entry.name);
	    } else {
		var shape = entry.dims.join(',');
		xs.push("call c_f_pointer(c_raw(allocs%" + entry.name + "), constructor%" + entry.name + ", (/" + shape + "/))");
	    }
	});
	return xs;
    })();
    /* */

  undefined
}!! This file is autogenerated. Do not edit!

module @{entity}
  use iso_c_binding
  use softf_allocatable_module
  implicit none
  private

  type, bind(c) :: @{entity}_dimensions_s
    @{dimsDeclList.join("\n    ");}
  end type @{entity}_dimensions_s

  type, bind(c) :: @{entity}_properties_s
    @{propsDeclList.join("\n    ");}
  end type @{entity}_properties_s

  type, bind(c) :: @{entity}_allocatable_s
    @{allocDeclList.join("\n    ");}
  end type @{entity}_allocatable_s

  type, bind(c) :: @{entity}_s
    type(c_ptr) :: vtable
    type(c_ptr) :: id
    type(@{entity}_dimensions_s) :: dims
    type(@{entity}_properties_s) :: props
    type(c_ptr) :: allocs
  end type @{entity}_s

  type T@{Entity}Dims
    @{dimsDeclList.join("\n    ");}
  end type T@{Entity}Dims

  type T@{Entity}
    type(T@{Entity}Dims) :: dimensions
    @{selfDeclList.join('\n    ');}
  end type T@{Entity}
 
  interface T@{Entity}
    procedure constructor
  end interface T@{Entity}

public :: T@{Entity}, T@{Entity}Dims

contains
  function constructor(ref)
    use iso_c_binding, only : c_ptr, c_size_t, c_f_pointer
    implicit none
    interface
       type(c_ptr) function c_raw(alloc) bind(c, name='softc_allocatable_raw_data')
         import :: c_ptr
         type(c_ptr), value :: alloc
       end function c_raw
    end interface
    !
    type(c_ptr), value :: ref
    type(T@{Entity}) :: constructor
    type(@{entity}_s), pointer :: self
    type(@{entity}_allocatable_s), pointer :: allocs
    !
    @{declLocalDimensions.join('\n    ');}
    call c_f_pointer(ref, self)
    call c_f_pointer(self%allocs, allocs)
    @{constructorSetDimensions.join('\n    ');}
    @{constructorSetProperties.join('\n    ');}

  end function constructor

end module @{entity}

