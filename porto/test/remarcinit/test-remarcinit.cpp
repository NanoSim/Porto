#include <gtest/gtest.h>
#include <QFileInfo>
#include <Soft>
#include <remarcsetup.hxx> // Autogenerated entity

TEST(DISABLED_PortoRemarcInitTest, InitFromStorage)
{
  auto storage = new soft::Storage("external", "remarc-init:///tmp/generated.in");
  ASSERT_TRUE(nullptr != storage);
  delete storage;
}

TEST(DISABLED_PortoRemarcInitTest, WriteFromEntity)
{
  auto storage = new soft::Storage("external", "remarc-init:///tmp/generated.in");
  auto remarcConfig = new soft::Remarcsetup();
  ASSERT_TRUE(nullptr != remarcConfig);
  remarcConfig->T_min = 0.0;
  remarcConfig->T_max = 100.0;
  remarcConfig->Delta_T = 10.0;
  remarcConfig->barrierHeight = 0.1;                /* Estimated uncertainty in barrier height */  
  remarcConfig->adsoptionEnergy = 0.2;              /* Estimated uncertainty in adsorption energy */
  remarcConfig->p = .3;                             /* Gas pressure */
  remarcConfig->useFreqToCalcRateConstants = false; /* Should frequencies be used to calculate rate constants? */
  remarcConfig->useFreqToCleanSurface = false;      /* Should frequencies be used for clean surface? */
  remarcConfig->useQuantum = false;                 /* Quantum (true) or classical (false) vibrational partition functions for rate constant calcuations */
  remarcConfig->rateConstPrefactor = 1E20;          /* Prefactor for rate constant calculations if frequencies are not used */
  remarcConfig->desorptionRatePrefactor = 1E18;     /* Prefactor for desorption rate constant calculations (s-1) if frequencies are not used */

  storage->save(remarcConfig);

  QFileInfo info("/tmp/generated.in");
  ASSERT_TRUE(info.exists());

  delete remarcConfig;
  delete storage;
}

TEST(DISABLED_PortoRemarcInitTest, ReadFromEntity)
{
  auto storage = new soft::Storage("external", "remarc-init:///tmp/generated.in");
  auto remarcConfig = new soft::Remarcsetup();

  storage->load(remarcConfig);
  ASSERT_DOUBLE_EQ(remarcConfig->T_min, 0.0);
  ASSERT_DOUBLE_EQ(remarcConfig->T_max, 100.0);
  ASSERT_DOUBLE_EQ(remarcConfig->Delta_T, 10.0);
  ASSERT_DOUBLE_EQ(remarcConfig->barrierHeight, 0.1);     /* Estimated uncertainty in barrier height */  
  ASSERT_DOUBLE_EQ(remarcConfig->adsoptionEnergy, 0.2);   /* Estimated uncertainty in adsorption energy */
  ASSERT_DOUBLE_EQ(remarcConfig->p, .3);                  /* Gas pressure */
  ASSERT_FALSE(remarcConfig->useFreqToCalcRateConstants); /* Should frequencies be used to calculate rate constants? */
  ASSERT_FALSE(remarcConfig->useFreqToCleanSurface);      /* Should frequencies be used for clean surface? */
  ASSERT_FALSE(remarcConfig->useQuantum);                 /* Quantum (true) or classical (false) vibrational partition functions for rate constant calcuations */
  ASSERT_DOUBLE_EQ(remarcConfig->rateConstPrefactor, 1E20);          /* Prefactor for rate constant calculations if frequencies are not used */
  ASSERT_DOUBLE_EQ(remarcConfig->desorptionRatePrefactor, 1E18);     /* Prefactor for desorption rate constant calculations (s-1) if frequencies are not used */
  
  delete remarcConfig;
  delete storage;
}
